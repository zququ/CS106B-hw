Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Memory Debugging Warmup
-----------------------
Q1. What does the yellow background for a test case indicate in the SimpleTest result window?
A1. TODO

Q2. What is the observed consequence of a test that uses `delete` on a memory address that has already been deallocated?
A2. TODO

Q3. On your system, what is the observed consequence of `badDeallocate`? Under what circumstances (if any) did the buggy code trigger an error or crash?
A3. TODO

Q4. How is a segmentation fault presented on your system?
A4. TODO

Labyrinth
---------
Q5. What is a different legal path through the example labyrinth that gathers all three needed items?
A5. TODO

Sorting Linked Lists
---------------------
Q6. If the `deallocateList` utility function were implemented recursively, give a rough estimate of the maximum length list it could successfully handle. What would be the observed result from attempting to deallocate a list longer than this maximum?
A6. TODO

Q7. The prototype for the sort function takes a `ListNode*` by reference. Explain why the pointer itself needs to be passed by reference and what the consequence would be if it were not.
A7. TODO

Q8. Run time trials and provide your results that confirm that QuickSort is O(NlogN) . Verify the runtime degrades to O(N^2) on inputs constructed to trigger the worst case behavior.
A8. TODO

Q9. Run the provided timing trials that compare your linked list QuickSort to a Vector sort on the same sequence and report the results. Who wins and why?
A9. TODO
